# or if it's never merged away, then it should be n-K
height_merge[min_cluster_2] <- NA
match_merge_row <- match(step, merges)
if(is.na(match_merge_row)) {
height_merge[min_cluster_1] <- n-K
} else {
if(match_merge_row > n-1) {
match_merge_row <- match_merge_row - (n-1)
}
height_merge[min_cluster_1] <- min(n-K, match_merge_row)
}
height_merge
height_merge[min_cluster_1]
hcl$merges[]
hcl$merges
hcl$merge
height_merge <- rep(n-K, n)
new_merge <- rep(n-K, n)
for(l in 1:(n-K)) {
minimal_clusters <- merges[l, ]
height_merge[-minimal_clusters[minimal_clusters < 0]] <- l
height_merge[minimal_clusters[minimal_clusters > 0]] <- l
}
new_merge
minimal_clusters[minimal_clusters > 0]
height_merge <- rep(n-K, n)
new_merge <- rep(n-K, n)
for(l in 1:(n-K)) {
minimal_clusters <- merges[l, ]
height_merge[-minimal_clusters[minimal_clusters < 0]] <- l
new_merge[minimal_clusters[minimal_clusters > 0]] <- l
}
height_merge
new_merge
match(1, merges)
cluster::pvaltest_hier_clusters_exact(X=dat, link="average", K=3, k1=1, k2=2, hcl=hcl)
clusterpval::test_hier_clusters_exact(X=dat, link="average", K=3, k1=1, k2=2, hcl=hcl)
new_merge[step]
solve_one_ineq <- function(A, B, C, tol=1e-10) {
# Computes the complement of the set {phi >= 0: B*phi + C >= 0},
# ignoring (-Inf, 0].
compute_linear_ineq_complement <- function(B, C, tol=1e-10) {
# Is B = 0?
if(abs(B) <= tol) {
if(C >= -tol) { # C >= 0: inequality automatically satisfied
return()
} else { # C < 0: something has gone wrong ...
warning("B = 0 and C < 0: B*phi + C >=0 is degenerate")
return(c(0, Inf))
}
}
# We know that B =/= 0
ratio <- -C/B
# Is B > 0?
if(B > tol) {
if(C >= -tol) { # -C/B <= 0: inequality automatically satisfied
return()
} else { # -C/B > 0: the interval extends to the right
return(c(0, ratio))
}
}
# We know B < 0
if(C <= tol) { # -C/B <= 0: inequality can't be satisfied
return(c(0, Inf))
}
# We know B < 0 & -C/B > 0: the interval extends to the left
return(c(ratio, Inf))
}
# A = 0?
if(abs(A) <= tol) {
return(compute_linear_ineq_complement(B, C, tol))
}
# We know A =/= 0
discrim <- B^2 - 4*A*C
# No roots or one root?
if(discrim <= tol) {
if(A > tol) { # Parabola opens up: inequality automatically satisfied
return()
} else { # Parabola opens down: inequality never satisfied
return(c(0, Inf))
}
}
# We now know that A =/= 0, and that there are two roots
sqrt_discrim <- sqrt(discrim)
roots <- sort(c(-B + sqrt_discrim, -B - sqrt_discrim)/(2*A))
# Parabola opens up? (A > 0?)
if(A > tol) {
if(roots[1] > tol) {
return(c(roots[1], roots[2]))
}
if(roots[2] <= tol) {
return()
}
return(c(0, roots[2]))
}
# We now know that there are two roots, and parabola opens down (A < 0)
if(roots[2] < -tol) {
return(c(0, Inf))
}
if(roots[1] > tol) {
return(c(0, roots[1], roots[2], Inf))
}
return(c(roots[2], Inf))
}
# Initialization and book-keeping
n <- nrow(X)
heights <- hcl$height
merges <- hcl$merge
cl <- stats::cutree(hcl, K)
k1_obs <- which(cl == k1)
k2_obs <- which(cl == k2)
other_obs <- setdiff(1:n, c(k1_obs, k2_obs))
S_complement <- list(c(-Inf, 0))
list_index <- 2
# where is each cluster in the whole clustering sequence merged away?
# if it's after the (n-K)th merge, then that cluster still exists at step (n-K)
height_merge <- rep(n-K, n)
new_merge <- rep(n-K, n)
for(l in 1:(n-K)) {
minimal_clusters <- merges[l, ]
height_merge[-minimal_clusters[minimal_clusters < 0]] <- l
new_merge[minimal_clusters[minimal_clusters > 0]] <- l
}
# Step 1
cluster_sizes <- rep(1, n)
merged_to_index <- rep(NA, n)
# Make the coefficients for d(i, i'; x'(\phi))
B <- matrix(NA, nrow(X), nrow(X))
C <- matrix(NA, nrow(X), nrow(X))
C[lower.tri(C)] <- stats::dist(X)^2
# compute quantities used in all coefficients
prop_k2 <- length(k2_obs)/(length(k1_obs) + length(k2_obs))
squared_prop_k2 <- prop_k2^2
prop_k1 <- prop_k2-1
squared_prop_k1 <- prop_k1^2
diff_means <- colMeans(X[k1_obs, , drop=FALSE]) - colMeans(X[k2_obs, , drop=FALSE])
squared_dist_means <- sum(diff_means^2)
dist_means <- sqrt(squared_dist_means)
# compute coefficients involving i in cluster k1 and i' in cluster k2
for(i in k1_obs) {
for(j in k2_obs) {
diff_ij <- X[i, ] - X[j, ]
cross_ij <- sum(diff_ij*diff_means)
if(i > j) {
B[i, j] <- 2*(cross_ij/dist_means - dist_means)
C[i, j] <- C[i, j] + squared_dist_means - 2*cross_ij
} else {
B[j, i] <- 2*(cross_ij/dist_means - dist_means)
C[j, i] <- C[j, i] + squared_dist_means - 2*cross_ij
}
}
}
# compute coefficients involving i in cluster k1 and i' not in clusters k1 or k2
for(i in k1_obs) {
for(j in other_obs) {
diff_ij <- X[i, ] - X[j, ]
cross_ij <- sum(diff_ij*diff_means)
if(i > j) {
B[i, j] <- 2*prop_k2*(cross_ij/dist_means - prop_k2*dist_means)
C[i, j] <- C[i, j] + squared_prop_k2*squared_dist_means - 2*prop_k2*cross_ij
} else {
B[j, i] <- 2*prop_k2*(cross_ij/dist_means - prop_k2*dist_means)
C[j, i] <- C[j, i] + squared_prop_k2*squared_dist_means - 2*prop_k2*cross_ij
}
}
}
# compute coefficients involving i in cluster k2 and i' not in clusters k1 or k2
for(i in k2_obs) {
for(j in other_obs) {
diff_ij <- X[i, ] - X[j, ]
cross_ij <- sum(diff_ij*diff_means)
if(i > j) {
B[i, j] <- 2*prop_k1*(cross_ij/dist_means - prop_k1*dist_means)
C[i, j] <- C[i, j] + squared_prop_k1*squared_dist_means - 2*prop_k1*cross_ij
} else {
B[j, i] <- 2*prop_k1*(cross_ij/dist_means - prop_k1*dist_means)
C[j, i] <- C[j, i] + squared_prop_k1*squared_dist_means - 2*prop_k1*cross_ij
}
}
}
# solve the inequalities
for(i in k1_obs) {
hm1 <- height_merge[i]
for(j in k2_obs) {
hm2 <- height_merge[j]
if(hm1 < hm2) {
upper_ij <- hm1
} else {
upper_ij <- hm2
}
current_height <- heights[upper_ij]
if(i > j) {
new_intervals <- solve_one_ineq(1, B[i, j], C[i, j] - current_height)
} else {
new_intervals <- solve_one_ineq(1, B[j, i], C[j, i] - current_height)
}
if(!is.null(new_intervals)) {
S_complement[[list_index]] <- new_intervals
list_index <- list_index + 1
}
}
}
for(i in k1_obs) {
hm1 <- height_merge[i]
for(j in other_obs) {
hm2 <- height_merge[j]
if(hm1 < hm2) {
upper_ij <- hm1
} else {
upper_ij <- hm2
}
current_height <- heights[upper_ij]
if(i > j) {
new_intervals <- solve_one_ineq(squared_prop_k2, B[i, j], C[i, j] - current_height)
} else {
new_intervals <- solve_one_ineq(squared_prop_k2, B[j, i], C[j, i] - current_height)
}
if(!is.null(new_intervals)) {
S_complement[[list_index]] <- new_intervals
list_index <- list_index + 1
}
}
}
for(i in k2_obs) {
hm1 <- height_merge[i]
for(j in other_obs) {
hm2 <- height_merge[j]
if(hm1 < hm2) {
upper_ij <- hm1
} else {
upper_ij <- hm2
}
current_height <- heights[upper_ij]
if(i > j) {
new_intervals <- solve_one_ineq(squared_prop_k1, B[i, j], C[i, j] - current_height)
} else {
new_intervals <- solve_one_ineq(squared_prop_k1, B[j, i], C[j, i] - current_height)
}
if(!is.null(new_intervals)) {
S_complement[[list_index]] <- new_intervals
list_index <- list_index + 1
}
}
}
for(step in 1:(n-K-1)) {
# Which clusters merged in this step?
minimal_clusters <- merges[step, ]
for(i in 1:2) {
if(minimal_clusters[i] > 0) {
minimal_clusters[i] <- merged_to_index[minimal_clusters[i]]
} else {
minimal_clusters[i] <- -minimal_clusters[i]
}
}
# Merge them to create the (step+1)th clustering
min_cluster_1 <- min(minimal_clusters)
min_cluster_2 <- max(minimal_clusters)
merged_to_index[step] <- min_cluster_1
# Update coefficient matrices
prop_min_1 <- cluster_sizes[min_cluster_1]/(cluster_sizes[min_cluster_1] + cluster_sizes[min_cluster_2])
prop_min_2 <- 1 - prop_min_1
if(cl[min_cluster_1] == k1) {
loop_index <- c(k2_obs, other_obs)
}
if(cl[min_cluster_1] == k2) {
loop_index <- c(k1_obs, other_obs)
}
if(cl[min_cluster_1] != k1 & cl[min_cluster_1] != k2) {
loop_index <- c(k1_obs, k2_obs)
}
for(j in loop_index) {
if(j < min_cluster_2) {
B2 <- B[min_cluster_2, j]
C2 <- C[min_cluster_2, j]
} else {
B2 <- B[j, min_cluster_2]
C2 <- C[j, min_cluster_2]
}
if(j < min_cluster_1) {
B[min_cluster_1, j] <- prop_min_1*B[min_cluster_1, j] + prop_min_2*B2
C[min_cluster_1, j] <- prop_min_1*C[min_cluster_1, j] + prop_min_2*C2
} else {
B[j, min_cluster_1] <- prop_min_1*B[j, min_cluster_1] + prop_min_2*B2
C[j, min_cluster_1] <- prop_min_1*C[j, min_cluster_1] + prop_min_2*C2
}
}
# Update cluster sizes
cluster_sizes[min_cluster_1] <- cluster_sizes[min_cluster_1] + cluster_sizes[min_cluster_2]
cluster_sizes[min_cluster_2] <- NA
# Update cluster indexing
if(cl[min_cluster_1] == k1) k1_obs <- k1_obs[k1_obs != min_cluster_2]
if(cl[min_cluster_1] == k2) k2_obs <- k2_obs[k2_obs != min_cluster_2]
if((cl[min_cluster_1] != k1) & (cl[min_cluster_1] != k2)) other_obs <- other_obs[other_obs != min_cluster_2]
if(cl[min_cluster_1] == k1) {
first_height <- new_merge[step]
for(j in k2_obs) {
if(first_height < height_merge[j]) {
current_height <- heights[first_height]
} else {
current_height <- heights[height_merge[j]]
}
if(min_cluster_1 > j) {
new_intervals <- solve_one_ineq(1, B[min_cluster_1, j], C[min_cluster_1, j] - current_height)
} else {
new_intervals <- solve_one_ineq(1, B[j, min_cluster_1], C[j, min_cluster_1] - current_height)
}
if(!is.null(new_intervals)) {
S_complement[[list_index]] <- new_intervals
list_index <- list_index + 1
}
}
for(j in other_obs) {
if(first_height < height_merge[j]) {
current_height <- heights[first_height]
} else {
current_height <- heights[height_merge[j]]
}
if(min_cluster_1 > j) {
new_intervals <- solve_one_ineq(squared_prop_k2, B[min_cluster_1, j], C[min_cluster_1, j] - current_height)
} else {
new_intervals <- solve_one_ineq(squared_prop_k2, B[j, min_cluster_1], C[j, min_cluster_1] - current_height)
}
if(!is.null(new_intervals)) {
S_complement[[list_index]] <- new_intervals
list_index <- list_index + 1
}
}
}
if(cl[min_cluster_1] == k2) {
first_height <- new_merge[step]
for(j in k1_obs) {
if(first_height < height_merge[j]) {
current_height <- heights[first_height]
} else {
current_height <- heights[height_merge[j]]
}
if(min_cluster_1 > j) {
new_intervals <- solve_one_ineq(1, B[min_cluster_1, j], C[min_cluster_1, j] - current_height)
} else {
new_intervals <- solve_one_ineq(1, B[j, min_cluster_1], C[j, min_cluster_1] - current_height)
}
if(!is.null(new_intervals)) {
S_complement[[list_index]] <- new_intervals
list_index <- list_index + 1
}
}
for(j in other_obs) {
if(first_height < height_merge[j]) {
current_height <- heights[first_height]
} else {
current_height <- heights[height_merge[j]]
}
if(min_cluster_1 > j) {
new_intervals <- solve_one_ineq(squared_prop_k1, B[min_cluster_1, j], C[min_cluster_1, j] - current_height)
} else {
new_intervals <- solve_one_ineq(squared_prop_k1, B[j, min_cluster_1], C[j, min_cluster_1] - current_height)
}
if(!is.null(new_intervals)) {
S_complement[[list_index]] <- new_intervals
list_index <- list_index + 1
}
}
}
if(cl[min_cluster_1] != k1 & cl[min_cluster_1] != k2) {
first_height <- new_merge[step]
for(j in k1_obs) {
if(first_height < height_merge[j]) {
current_height <- heights[first_height]
} else {
current_height <- heights[height_merge[j]]
}
if(min_cluster_1 > j) {
new_intervals <- solve_one_ineq(squared_prop_k2, B[min_cluster_1, j], C[min_cluster_1, j] - current_height)
} else {
new_intervals <- solve_one_ineq(squared_prop_k2, B[j, min_cluster_1], C[j, min_cluster_1] - current_height)
}
if(!is.null(new_intervals)) {
S_complement[[list_index]] <- new_intervals
list_index <- list_index + 1
}
}
for(j in k2_obs) {
if(first_height < height_merge[j]) {
current_height <- heights[first_height]
} else {
current_height <- heights[height_merge[j]]
}
if(min_cluster_1 > j) {
new_intervals <- solve_one_ineq(squared_prop_k1, B[min_cluster_1, j], C[min_cluster_1, j] - current_height)
} else {
new_intervals <- solve_one_ineq(squared_prop_k1, B[j, min_cluster_1], C[j, min_cluster_1] - current_height)
}
if(!is.null(new_intervals)) {
S_complement[[list_index]] <- new_intervals
list_index <- list_index + 1
}
}
}
}
S_complement <- do.call('c', S_complement)
S_complement <- matrix(S_complement, length(S_complement)/2, 2, byrow=TRUE)
S_complement <- intervals::reduce(intervals::Intervals(S_complement), check_valid=FALSE)
# complement the complement to get S
S <- intervals::interval_complement(S_complement, check_valid=FALSE)
S
library(fastcluster)
search()
.packages()
(.packages())
test <- function() .packages()
test()
test <- function() return(.packages())
(test())
library(ggplot2)
library(patchwork)
ev_cat <- NULL
for(id in 1:3) {
name_of_sim <- paste("../simulation-results/cond-n", 30, "-q", 10, "-pt", id, ".Rdata", sep="")
if(file.exists(name_of_sim)) {
load(name_of_sim)
ev_cat <- rbind(ev_cat, ev)
}
}
collate <- NULL
for(effect in seq(4, 7, by=0.5)) {
ev <- ev_cat[ev_cat$Model %in% unique(ev_cat$Model)[grep(paste("len_", effect, "/", sep=""),
unique(ev_cat$Model))], ]
df <- data.frame(effect=rep(effect, 4),
Method=c("average-test-K-3", "centroid-test-K-3", "complete-test-K-3",
"single-test-K-3"),
rejects=tapply(ev[ev$recover == 1, ]$rejects, ev[ev$recover == 1, ]$Method, mean),
nsim=tapply(ev[ev$recover == 1, ]$rejects, ev[ev$recover == 1, ]$Method, length),
total=rep(nrow(ev)/4, 4))
collate <- rbind(collate, df)
}
collate$detect <- collate$nsim/collate$total
plot1 <- ggplot(collate) + geom_line(aes(x=effect, y=rejects, group=Method, colour=Method)) +
geom_errorbar(aes(group=Method, colour=Method,
x=effect,
y=rejects, ymin=rejects - qnorm(0.975)*sqrt(rejects*(1 - rejects)/nsim),
ymax=rejects + qnorm(0.975)*sqrt(rejects*(1 - rejects)/nsim), width=0.05))+
theme_bw(base_size=20) + scale_colour_discrete(name="Linkage",
labels=c("Average", "Centroid", "Complete", "Single")) +
xlab(expression(paste("Distance between clusters (", delta, ")", sep=""))) +
ylab("Conditional power") + ggtitle("(a) Conditional power")
plot2 <- ggplot(collate) + geom_line(aes(x=effect, y=detect, group=Method, colour=Method)) +
geom_errorbar(aes(group=Method, colour=Method,
x=effect,
y=detect, ymin=detect - qnorm(0.975)*sqrt(detect*(1 - detect)/total),
ymax=detect + qnorm(0.975)*sqrt(detect*(1 - detect)/total), width=0.05)) +
theme_bw(base_size=20) + scale_colour_discrete(name="Linkage",
labels=c("Average", "Centroid", "Complete", "Single")) +
xlab(expression(paste("Distance between clusters (", delta, ")", sep=""))) +
ylab("Detection probability") + ggtitle("(b) Detection probability") + ylim(c(0, 1))
combined <- (plot1 + plot2) &
theme(legend.position = "right") & guides(colour=guide_legend(nrow=4, byrow=TRUE) )
ggsave(combined + plot_layout(guides = 'collect'), file="../figures/Figure5.pdf", width=14, height=4)
setwd("~/Dropbox/My-Research/Lucy-Dissertation/Clustering-Selective-Inference/clusterpval-experiments/figures-code")
library(ggplot2)
library(patchwork)
ev_cat <- NULL
for(id in 1:3) {
name_of_sim <- paste("../simulation-results/cond-n", 30, "-q", 10, "-pt", id, ".Rdata", sep="")
if(file.exists(name_of_sim)) {
load(name_of_sim)
ev_cat <- rbind(ev_cat, ev)
}
}
collate <- NULL
for(effect in seq(4, 7, by=0.5)) {
ev <- ev_cat[ev_cat$Model %in% unique(ev_cat$Model)[grep(paste("len_", effect, "/", sep=""),
unique(ev_cat$Model))], ]
df <- data.frame(effect=rep(effect, 4),
Method=c("average-test-K-3", "centroid-test-K-3", "complete-test-K-3",
"single-test-K-3"),
rejects=tapply(ev[ev$recover == 1, ]$rejects, ev[ev$recover == 1, ]$Method, mean),
nsim=tapply(ev[ev$recover == 1, ]$rejects, ev[ev$recover == 1, ]$Method, length),
total=rep(nrow(ev)/4, 4))
collate <- rbind(collate, df)
}
collate$detect <- collate$nsim/collate$total
plot1 <- ggplot(collate) + geom_line(aes(x=effect, y=rejects, group=Method, colour=Method)) +
geom_errorbar(aes(group=Method, colour=Method,
x=effect,
y=rejects, ymin=rejects - qnorm(0.975)*sqrt(rejects*(1 - rejects)/nsim),
ymax=rejects + qnorm(0.975)*sqrt(rejects*(1 - rejects)/nsim), width=0.05))+
theme_bw(base_size=20) + scale_colour_discrete(name="Linkage",
labels=c("Average", "Centroid", "Complete", "Single")) +
xlab(expression(paste("Distance between clusters (", delta, ")", sep=""))) +
ylab("Conditional power") + ggtitle("(a) Conditional power")
plot2 <- ggplot(collate) + geom_line(aes(x=effect, y=detect, group=Method, colour=Method)) +
geom_errorbar(aes(group=Method, colour=Method,
x=effect,
y=detect, ymin=detect - qnorm(0.975)*sqrt(detect*(1 - detect)/total),
ymax=detect + qnorm(0.975)*sqrt(detect*(1 - detect)/total), width=0.05)) +
theme_bw(base_size=20) + scale_colour_discrete(name="Linkage",
labels=c("Average", "Centroid", "Complete", "Single")) +
xlab(expression(paste("Distance between clusters (", delta, ")", sep=""))) +
ylab("Detection probability") + ggtitle("(b) Detection probability") + ylim(c(0, 1))
combined <- (plot1 + plot2) &
theme(legend.position = "right") & guides(colour=guide_legend(nrow=4, byrow=TRUE) )
ggsave(combined + plot_layout(guides = 'collect'), file="../figures/Figure5.pdf", width=14, height=4)
load("/Users/lucygao/Dropbox/My-Research/Lucy-Dissertation/Clustering-Selective-Inference/R-Code/check-type1-all/results/non-iso-type1-1f-n100-q2-sig1.Rdata")
library(ggplot2)
ggplot(ev) +
geom_qq(aes(sample=pval,
group=Method, colour=Method), size=0.5, distribution=qunif) +
geom_abline(slope=1, intercept=0, col="black") +
xlab("Theoretical quantiles") +
ylab("Empirical quantiles") + theme_bw(base_size = 22) +
scale_colour_discrete(guide=guide_legend(nrow=6, override.aes=(list(size=5)))) +
theme(legend.position="bottom")
