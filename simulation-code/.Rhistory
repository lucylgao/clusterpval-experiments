all.settings <- expand.grid(c(150), c(10), rev(seq(3, 7, by=0.5)), c(1))
all.settings
setwd("~/Dropbox/My-Research/Lucy-Dissertation/Clustering-Selective-Inference/R-Code/paper-code/")
library(ggplot2)
library(patchwork)
ev_cat <- NULL
n <- 150
for(q in c(10)) {
for(effect in rev(seq(4, 7, by=0.5))) {
name_of_sim <- paste("../results/power-n", n, "-q", q, "-effect-", effect, ".Rdata", sep="")
if(file.exists(name_of_sim)) {
load(name_of_sim)
ev_cat <- rbind(ev_cat, ev)
}
}
}
table(ev_cat$Method)
table(ev$Method)
setwd("~/Dropbox/My-Research/Lucy-Dissertation/Clustering-Selective-Inference/R-Code/paper-code/")
library(ggplot2)
library(patchwork)
ev_cat <- NULL
n <- 150
for(q in c(10)) {
for(effect in rev(seq(4, 7, by=0.5))) {
name_of_sim <- paste("../simulation-results/power-n", n, "-q", q, "-effect-", effect, ".Rdata", sep="")
if(file.exists(name_of_sim)) {
load(name_of_sim)
ev_cat <- rbind(ev_cat, ev)
}
}
}
table(ev_cat)
setwd("~/Dropbox/My-Research/Lucy-Dissertation/Clustering-Selective-Inference/R-Code/paper-code/")
library(ggplot2)
library(patchwork)
ev_cat <- NULL
n <- 150
for(q in c(10)) {
for(effect in rev(seq(4, 7, by=0.5))) {
name_of_sim <- paste("./simulation-results/power-n", n, "-q", q, "-effect-", effect, ".Rdata", sep="")
if(file.exists(name_of_sim)) {
load(name_of_sim)
ev_cat <- rbind(ev_cat, ev)
}
}
}
table(ev_cat$Method)
setwd("~/Dropbox/My-Research/Lucy-Dissertation/Clustering-Selective-Inference/R-Code/paper-code/")
library(ggplot2)
library(patchwork)
ev_cat <- NULL
n <- 150
for(q in c(10)) {
for(effect in rev(seq(4, 7, by=0.5))) {
name_of_sim <- paste("./simulation-results/power-n", n, "-q", q, "-effect-", effect, ".Rdata", sep="")
if(file.exists(name_of_sim)) {
load(name_of_sim)
ev_cat <- rbind(ev_cat, ev)
}
}
}
average <- ev_cat[ev_cat$Method == "average-iso-test-K-3", ]
centroid <- ev_cat[ev_cat$Method == "centroid-iso-test-K-3", ]
single <- ev_cat[ev_cat$Method == "single-iso-test-K-3", ]
complete <- ev_cat[ev_cat$Method == "complete-iso-test-K-3", ]
threshold <- 10
g1 <- ggplot(average[average$nmin >= threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(a) Average linkage") + geom_hline(yintercept=0.05, lty="dotted")
g2 <- ggplot(centroid[centroid$nmin >= threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(b) Centroid linkage") + geom_hline(yintercept=0.05, lty="dotted")
g3 <- ggplot(single[single$nmin >= threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(c) Single linkage")+ geom_hline(yintercept=0.05, lty="dotted")
g4 <- ggplot(complete[complete$nmin >= threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(d) Complete linkage")+ geom_hline(yintercept=0.05, lty="dotted")
g1+g2+g3+g4
g1+g2+g3+g4 + plot_layout(nrow=1)
#### "Large-sample" power curves ####
threshold <- 10
g1 <- ggplot(average[average$nmin >= threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(a) Average linkage") + geom_hline(yintercept=0.05, lty="dotted")
g2 <- ggplot(centroid[centroid$nmin >= threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(b) Centroid linkage") + geom_hline(yintercept=0.05, lty="dotted")
g3 <- ggplot(single[single$nmin >= threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(c) Single linkage")+ geom_hline(yintercept=0.05, lty="dotted")
g4 <- ggplot(complete[complete$nmin >= threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(d) Complete linkage")+ geom_hline(yintercept=0.05, lty="dotted")
ggsave(((g1 + g2 + g3 + g4) + plot_layout(nrow=1)) & theme_bw(base_size = 14),
file="./figures/Figure7abcd.pdf",
width=12, height=2.5)
p1 <- ggplot(average[average$nmin < threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(e) Average linkage") + geom_hline(yintercept = 0.05, lty="dotted")
p2 <- ggplot(centroid[centroid$nmin <  threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(f) Centroid linkage") + geom_hline(yintercept = 0.05, lty="dotted")
p3 <- ggplot(single[single$nmin < threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(g) Single linkage") + geom_hline(yintercept = 0.05, lty="dotted")
p4 <- ggplot(complete[complete$nmin < threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(h) Complete linkage") + geom_hline(yintercept = 0.05, lty="dotted")
ggsave(((p1 + p2 + p3 + p4) + plot_layout(nrow=1)) & theme_bw(base_size = 14),
file="./figures/Figure7efgh.pdf", width=12, height=2.5)
ggsave(((p1 + p2 + p3 + p4) + plot_layout(nrow=1)) & theme_bw(base_size = 16),
file="./figures/Figure7efgh.pdf", width=12, height=2.5)
ggsave(((p1 + p2 + p3 + p4) + plot_layout(nrow=1)) & theme_bw(base_size = 15),
file="./figures/Figure7efgh.pdf", width=12, height=2.5)
ggsave(((p1 + p2 + p3 + p4) + plot_layout(nrow=1)) & theme_bw(base_size = 14.5),
file="./figures/Figure7efgh.pdf", width=12, height=2.5)
ggsave(((p1 + p2 + p3 + p4) + plot_layout(nrow=1)) & theme_bw(base_size = 14.5),
file="./figures/Figure7efgh.pdf", width=12, height=2)
ggsave(((g1 + g2 + g3 + g4) + plot_layout(nrow=1)) & theme_bw(base_size = 14.5),
file="./figures/Figure7abcd.pdf",
width=12, height=2)
setwd("~/Dropbox/My-Research/Lucy-Dissertation/Clustering-Selective-Inference/R-Code/paper-code/")
library(ggplot2)
library(patchwork)
ev_cat <- NULL
n <- 150
for(q in c(10)) {
for(effect in rev(seq(4, 7, by=0.5))) {
name_of_sim <- paste("./simulation-results/power-n", n, "-q", q, "-effect-", effect, ".Rdata", sep="")
if(file.exists(name_of_sim)) {
load(name_of_sim)
ev_cat <- rbind(ev_cat, ev)
}
}
}
average <- ev_cat[ev_cat$Method == "average-iso-test-K-3", ]
centroid <- ev_cat[ev_cat$Method == "centroid-iso-test-K-3", ]
single <- ev_cat[ev_cat$Method == "single-iso-test-K-3", ]
complete <- ev_cat[ev_cat$Method == "complete-iso-test-K-3", ]
threshold <- 10
g1 <- ggplot(average[average$nmin >= threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(a) Average linkage")
g2 <- ggplot(centroid[centroid$nmin >= threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(b) Centroid linkage")
g3 <- ggplot(single[single$nmin >= threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(c) Single linkage")
g4 <- ggplot(complete[complete$nmin >= threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(d) Complete linkage")
ggsave(((g1 + g2 + g3 + g4) + plot_layout(nrow=1)) & theme_bw(base_size = 14.5),
file="./figures/Figure7abcd.pdf",
width=12, height=2)
p1 <- ggplot(average[average$nmin < threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(e) Average linkage")
p2 <- ggplot(centroid[centroid$nmin <  threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(f) Centroid linkage")
p3 <- ggplot(single[single$nmin < threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(g) Single linkage")
p4 <- ggplot(complete[complete$nmin < threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(h) Complete linkage")
ggsave(((p1 + p2 + p3 + p4) + plot_layout(nrow=1)) & theme_bw(base_size = 14.5),
file="./figures/Figure7efgh.pdf", width=12, height=2)
setwd("~/Dropbox/My-Research/Lucy-Dissertation/Clustering-Selective-Inference/R-Code/paper-code/simulation-code")
## @knitr init
library(simulator)
n <- 100
nfeat <- 2
sig <- 1
source("model_functions.R")
source("type1_method_functions.R")
source("eval_functions.R")
name_of_simulation <- paste("naive-type1-n", n, "-q", nfeat, "-sig", sig,  sep="")
sim <- new_simulation(name=name_of_simulation, label=name_of_simulation)
sim <- sim %>%
generate_model(make_null_mod, n=n, q=nfeat, sig=sig)
sim <- sim %>% simulate_from_model(nsim=1, index=1)
sim <- sim %>% run_method(c(multivariate_Z_test_methods,
sample_split_methods,
selective_methods),
parallel=list(socket_names=1, libraries=c("dplyr", "clusterpval")))
## @knitr init
library(simulator)
n <- 100
nfeat <- 2
sig <- 1
source("model_functions.R")
source("type1_method_functions.R")
source("eval_functions.R")
name_of_simulation <- paste("naive-type1-n", n, "-q", nfeat, "-sig", sig,  sep="")
sim <- new_simulation(name=name_of_simulation, label=name_of_simulation)
sim <- sim %>%
generate_model(make_null_mod, n=n, q=nfeat, sig=sig)
sim <- sim %>% simulate_from_model(nsim=1, index=1)
sim <- sim %>% run_method(c(multivariate_Z_test_methods,
sample_split_methods,
selective_methods),
parallel=list(socket_names=1, libraries=c("clusterpval")))
sim <- sim %>% evaluate(c(stat, pval, rejects))
ev <- sim %>% evals %>% as.data.frame
## @knitr init
library(simulator)
if(Sys.getenv("SGE_TASK_ID") != "") {
this.sim.id <- as.numeric(Sys.getenv("SGE_TASK_ID"))
} else {
this.sim.id <- 1
}
all.settings <- expand.grid(c(c(150)), c(2, 10, 100), c(1, 2))
this.setting <- all.settings[this.sim.id, ]
n <- as.numeric(this.setting[1])
nfeat <- as.numeric(this.setting[2])
sig <- as.numeric(this.setting[3])
source("model_functions.R")
source("type1_method_functions.R")
source("eval_functions.R")
name_of_simulation <- paste("type1-n", n, "-q", nfeat, "-sig", sig,  sep="")
sim <- new_simulation(name=name_of_simulation, label=name_of_simulation)
sim <- sim %>%
generate_model(make_null_mod, n=n, q=nfeat, sig=sig, seed=this.sim.id)
sim <- sim %>% simulate_from_model(nsim=1, index=1)
sim <- sim %>% run_method(c(selective_methods),
parallel=list(socket_names=1, libraries=c("clusterpval")))
sim <- sim %>% evaluate(c(stat, pval, rejects))
ev <- sim %>% evals %>% as.data.frame
setwd("~/Dropbox/My-Research/Lucy-Dissertation/Clustering-Selective-Inference/R-Code/paper-code/simulation-code")
dplyr
## @knitr init
library(simulator)
if(Sys.getenv("SGE_TASK_ID") != "") {
this.sim.id <- as.numeric(Sys.getenv("SGE_TASK_ID"))
} else {
this.sim.id <- 1
}
source("model_functions.R")
source("power_method_functions.R")
source("eval_functions.R")
all.settings <- expand.grid(c(150), c(10), seq(4, 7, by=0.5), c(1))
all.settings <- all.settings[order(all.settings$Var2), ]
this.setting <- all.settings[this.sim.id, ]
n <- as.numeric(this.setting[1])
nfeat <- as.numeric(this.setting[2])
len <- as.numeric(this.setting[3])
sig <- as.numeric(this.setting[4])
name_of_simulation <- paste("power-n", n, "-q", nfeat, "-effect-", len/sig, sep="")
sim <- new_simulation(name=name_of_simulation, label=name_of_simulation)
sim <- sim %>%
generate_model(make_three_clusters_mod, n=n, q=nfeat, len=len, sig=sig, seed=this.sim.id)
sim <- sim %>% simulate_from_model(nsim=1, index=1)
sim <- sim %>% run_method(selective_test_methods,
parallel=list(socket_names=1, libraries=c("clusterpval")))
sim <- sim %>% evaluate(c(pval, stat, rejects, effect, recover, n1, n2, nmin, boundary))
ev <- sim %>% evals %>% as.data.frame
ev
## @knitr init
library(simulator)
if(Sys.getenv("SGE_TASK_ID") != "") {
this.sim.id <- as.numeric(Sys.getenv("SGE_TASK_ID"))
} else {
this.sim.id <- 1
}
source("model_functions.R")
source("cond_power_method_functions.R")
source("eval_functions.R")
n <- 30
nfeat <- 10
sig <- 1
name_of_simulation <- paste("cond-n", n, "-q", nfeat, "-pt", this.sim.id, sep="")
sim <- new_simulation(name=name_of_simulation, label=name_of_simulation)
sim <- sim %>%
generate_model(make_three_clusters_mod, n=n, q=nfeat, sig=sig, id=this.sim.id,
seed=this.sim.id, len = as.list(seq(4, 7, by=0.5)), vary_along = "len")
sim <- sim %>% simulate_from_model(nsim=1, index=1)
sim <- sim %>% run_method(selective_test_methods,
parallel=list(socket_names=1, libraries=c("clusterpval")))
sim <- sim %>% evaluate(c(pval, stat, rejects, effect, recover, n1, n2, nmin))
ev <- sim %>% evals %>% as.data.frame
setwd("~/Dropbox/My-Research/Lucy-Dissertation/Clustering-Selective-Inference/R-Code/paper-code/simulation-code")
## @knitr init
library(simulator)
if(Sys.getenv("SGE_TASK_ID") != "") {
this.sim.id <- as.numeric(Sys.getenv("SGE_TASK_ID"))
} else {
this.sim.id <- 1
}
source("model_functions.R")
source("cond_power_method_functions.R")
source("eval_functions.R")
n <- 30
nfeat <- 10
sig <- 1
name_of_simulation <- paste("cond-n", n, "-q", nfeat, "-pt", this.sim.id, sep="")
sim <- new_simulation(name=name_of_simulation, label=name_of_simulation)
sim <- sim %>%
generate_model(make_three_clusters_mod, n=n, q=nfeat, sig=sig, id=this.sim.id,
seed=this.sim.id, len = as.list(seq(4, 7, by=0.5)), vary_along = "len")
sim <- sim %>% simulate_from_model(nsim=1, index=1)
sim <- sim %>% run_method(selective_test_methods,
parallel=list(socket_names=1, libraries=c("clusterpval")))
sim <- sim %>% evaluate(c(pval, stat, rejects, effect, recover, n1, n2, nmin))
ev <- sim %>% evals %>% as.data.frame
setwd("~/Dropbox/My-Research/Lucy-Dissertation/Clustering-Selective-Inference/R-Code/paper-code/simulation-code")
## @knitr init
library(simulator)
if(Sys.getenv("SGE_TASK_ID") != "") {
this.sim.id <- as.numeric(Sys.getenv("SGE_TASK_ID"))
} else {
this.sim.id <- 1
}
source("model_functions.R")
source("cond_power_method_functions.R")
source("eval_functions.R")
n <- 30
nfeat <- 10
sig <- 1
name_of_simulation <- paste("cond-n", n, "-q", nfeat, "-pt", this.sim.id, sep="")
sim <- new_simulation(name=name_of_simulation, label=name_of_simulation)
sim <- sim %>%
generate_model(make_three_clusters_mod_id, n=n, q=nfeat, sig=sig, id=this.sim.id,
seed=this.sim.id, len = as.list(seq(4, 7, by=0.5)), vary_along = "len")
## @knitr init
library(simulator)
if(Sys.getenv("SGE_TASK_ID") != "") {
this.sim.id <- as.numeric(Sys.getenv("SGE_TASK_ID"))
} else {
this.sim.id <- 1
}
source("model_functions.R")
source("cond_power_method_functions.R")
source("eval_functions.R")
n <- 30
nfeat <- 10
sig <- 1
name_of_simulation <- paste("cond-n", n, "-q", nfeat, "-pt", this.sim.id, sep="")
sim <- new_simulation(name=name_of_simulation, label=name_of_simulation)
sim <- sim %>%
generate_model(make_three_clusters_mod_with_id, n=n, q=nfeat, sig=sig, id=this.sim.id,
seed=this.sim.id, len = as.list(seq(4, 7, by=0.5)), vary_along = "len")
## @knitr init
library(simulator)
if(Sys.getenv("SGE_TASK_ID") != "") {
this.sim.id <- as.numeric(Sys.getenv("SGE_TASK_ID"))
} else {
this.sim.id <- 1
}
source("model_functions.R")
source("cond_power_method_functions.R")
source("eval_functions.R")
n <- 30
nfeat <- 10
sig <- 1
name_of_simulation <- paste("cond-n", n, "-q", nfeat, "-pt", this.sim.id, sep="")
sim <- new_simulation(name=name_of_simulation, label=name_of_simulation)
sim <- sim %>%
generate_model(make_three_clusters_mod_with_id, n=n, q=nfeat, sig=sig, id=this.sim.id,
seed=this.sim.id, len = as.list(seq(4, 7, by=0.5)), vary_along = "len")
sim <- sim %>% simulate_from_model(nsim=1, index=1)
sim <- sim %>% run_method(selective_test_methods,
parallel=list(socket_names=1, libraries=c("clusterpval")))
sim <- sim %>% evaluate(c(pval, stat, rejects, effect, recover, n1, n2, nmin))
ev <- sim %>% evals %>% as.data.frame
ev
